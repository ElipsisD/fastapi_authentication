services:

  gateway:
    container_name: ms.gateway
    image: nginx:latest
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - auth_network
    depends_on:
      auth:
        condition: service_healthy
      catalog:
        condition: service_healthy
      statistic:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "80:80"

  auth:
    build:
      context: ./auth
      dockerfile: ./Dockerfile
    container_name: ms.auth
    volumes:
      - ./auth:/app
      - /app/.venv
    ports:
      - "8001:8001"
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8001/auth/health-check/" ]
      start_period: 200s
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - auth_network

  catalog:
    build:
      context: ./catalog
      dockerfile: ./Dockerfile
    container_name: ms.catalog
    volumes:
      - ./catalog:/app
      - /app/.venv
    ports:
      - "8002:8002"
    depends_on:
      auth:
        condition: service_healthy
      statistic:
        condition: service_healthy
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8002/api/health-check/" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth_network

  statistic:
    build:
      context: ./statistic
      dockerfile: ./Dockerfile
    container_name: ms.statistic
    volumes:
      - ./statistic:/app
      - /app/.venv
    ports:
      - "8003:8003"
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      statistic_mongo:
        condition: service_healthy
      auth:
        condition: service_healthy
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8003/statistic/health-check/" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth_network

  statistic_mongo:
    image: mongo:latest
    container_name: ms.statistic_mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB__USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DB__PASSWORD}
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ./statistic/data/:/data/db
      - ./mongod.conf:/etc/mongo/mongod.conf
    command: mongod --config /etc/mongo/mongod.conf
    networks:
      - auth_network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    hostname: rabbitmq
    container_name: ms.rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_MQ__USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_MQ__PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - auth_network

  dozzle:
    container_name: ms.dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"

networks:
  auth_network:
    name: auth_network
    driver: bridge

volumes:
  rabbitmq-data:
